<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>P4 on 大叔筆記</title>
    <link>https://john123797.github.io/tags/p4/</link>
    <description>Recent content in P4 on 大叔筆記</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Mon, 14 Dec 2020 14:59:13 +0800</lastBuildDate><atom:link href="https://john123797.github.io/tags/p4/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用 ONOS 來控制 P4 Switch</title>
      <link>https://john123797.github.io/post/p4_onos/</link>
      <pubDate>Mon, 14 Dec 2020 14:59:13 +0800</pubDate>
      
      <guid>https://john123797.github.io/post/p4_onos/</guid>
      <description>ONOS 與 P4 如果要在 ONOS 上使用 P4 主要是用以下這些步驟進行開發
 撰寫 P4 程式 編譯後得到 P4Info 文件 撰寫與編譯 Pipeconf 應用程式，此時會將 P4Info、BMv2 JSON、Tofino Binary 等相關文件打包成 oar 檔 撰寫控制應用程式，可以是 Pipeline-agnostic 或是 Pipeline-aware  而其代表的意義如下
  Pipeline-agnostic application: 這類型的應用程式並不會知道即將面對的裝置所用的 Pipeline 長怎麼樣，僅會專心去做要做的事情，舉例來說 ProxyArp 或是 LLDP provider 等等。
  Pipeline-aware application: 這類型的則是針對特定 Pipeline 所設計的，會直接產生出特定的 Flow 以及 Group，並直接安裝到特定的 Table 中。
  ONOS 與 PI 講到 P4 的控制層面一定會想到 PI(protocol independent) 架構 雖然也是有人使用 OpenFlow 來當作控制協議 但其在彈性上並不是很好 故目前大多數人會傾向使用 P4Runtime</description>
    </item>
    
  </channel>
</rss>
